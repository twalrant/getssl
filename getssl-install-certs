#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# getssl-install-certs - subset utility of GetSSL - install available
# certificates (obtained by 'getssl')

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

# For usage, run "getssl-install-certs -h"

# Revision history:
# 2018-01-12 Created (v0.1)
# 2018-01-17 Add installation of DHPARAM file (v0.2)
# 2018-03-31 Change installation method - based of (dynamic) makefile (v0.3)
# -----------------------------------------------------------------------------
declare -A CERTS PRIVATE DESC

PROGNAME=${0##*/}
VERSION="0.03"

# defaults
CAROOT=le-chain
DEFAULT_TEXT=example.org
DOMAIN=
FORMAT_TEXT="%-26s - %s\n"
INSTALL_CERT_MODE='0644'
INSTALL_CERT_OWNER='root.root'
INSTALL_KEY_MODE='0600'
INSTALL_KEY_OWNER='root.root'
MAKETARGET=
ORIG_CMD=$(readlink -f $0)
ORIG_UMASK_CMD=$(umask -p)	# bash command
WORKING_DIR=~/.getssl

_CHECK_ALL=0
_FORCE=0
_QUIET=0
_USE_DEBUG=0

## File extensions convention:
# --------------+--------------------+---------+----------------------------
# Extensions    | Cert CAcert Key DH | Var     | Descriptions
# --------------+--------------------+---------+----------------------------
# .crt          |      x             | CA      | CA cert
# .crt          | x                  | CERT    | Domain cert
# .pem          | x    x             | CHAIN   | Domain chain (certs)
# .pem          | x    x      x      | PEM     | Domain chain and key (priv)
# .key          |             x      | KEY     | Domain key
# .dhparam      |                 x  | DH      | Domain DH parameters
# _dh.pem       | x    x      x   x  | DHPEM   | Domain chain, key and DH
# _dh.key       |             x   x  | DHKEY   | Domain key and DH
# _dh.crt       |             x   x  | DHCRT   | Domain cert and DH
# _crt.key      | x           x      | CRTKEY  | Domain cert and key 
# --------------+--------------------+---------+----------------------------
# .txt          | o    o             | TXTCERT | Domain certs text report
# .txt          | o    o      o   o  | TXTKEY  | Domain certs text report
# --------------+---------------------+--------+----------------------------

## Supported CA & DOMAIN LOCATION types:
LOCTYPES+=('CA_CERT')
LOCTYPES+=('DOMAIN_CERT')
LOCTYPES+=('DOMAIN_CHAIN')
LOCTYPES+=('DOMAIN_KEY')
LOCTYPES+=('DOMAIN_PEM')
LOCTYPES+=('DOMAIN_DH')
LOCTYPES+=('DOMAIN_DHPEM')
LOCTYPES+=('DOMAIN_DHKEY')
LOCTYPES+=('DOMAIN_DHCRT')
LOCTYPES+=('DOMAIN_CRTKEY')
LOCTYPES+=('DOMAIN_TXTCERT')
LOCTYPES+=('DOMAIN_TXTKEY')

## Describe (target) files compositions
CERTS[CA]='CA_CERT'
CERTS[CERT]='DOMAIN_CERT'
CERTS[CHAIN]='DOMAIN_CERT,CA_CERT'
PRIVATE[KEY]='DOMAIN_KEY'
PRIVATE[DH]='DOMAIN_DH'
PRIVATE[PEM]='DOMAIN_CERT,CA_CERT,DOMAIN_KEY'
PRIVATE[DHPEM]='DOMAIN_CERT,CA_CERT,DOMAIN_KEY,DOMAIN_DH'
PRIVATE[DHKEY]='DOMAIN_KEY,DOMAIN_DH'
PRIVATE[DHCRT]='DOMAIN_CERT,DOMAIN_DH'
PRIVATE[CRTKEY]='DOMAIN_CERT,DOMAIN_KEY'

DESC[CA]='CA certificate'
DESC[CERT]='Domain certificate'
DESC[CHAIN]='CA and domain certificates'
DESC[KEY]='Domain private key'
DESC[DH]='Domain DH parameters'
DESC[PEM]='CA and domain certificates and domain key'
DESC[DHPEM]='CA and domain certificates, domain key and DH parameters'
DESC[DHKEY]='Domain key and DH parameters'
DESC[DHCRT]='Domain certificate and DH parameters'
DESC[CRTKEY]='Domain certificate and key'

## Commands fullpath
CAT=/bin/cat
CHMOD=/bin/chmod
CHOWN=/bin/chown
DATE=/bin/date
ECHO=/bin/echo
GREP=/bin/grep
MAKE=/usr/bin/make
OPENSSL=/usr/bin/openssl
PRINTF=/usr/bin/printf
RM=/bin/rm
TEE=/usr/bin/tee
UNAME=/bin/uname

# Define all functions (in alphabetical order)

check_config() { # check the config files for all obvious errors
    local config_errors=false

    debug "checking config"

    if [[ -z "${DOMAIN_CERT_LOCATION}" ]]; then
        info "${DOMAIN}: DOMAIN_CERT_LOCATION not specified for domain in ${DOMAIN_DIR}/getssl.cfg"
        config_errors=true
    else
        debug "checked DOMAIN_CERT_LOCATION "
    fi

    if [[ -z "${DOMAIN_KEY_LOCATION}" ]]; then
        info "${DOMAIN}: DOMAIN_KEY_LOCATION not specified for domain in ${DOMAIN_DIR}/getssl.cfg"
        config_errors=true
    else
        debug "checked DOMAIN_KEY_LOCATION "
    fi

    if [[ "${config_errors}" == "true" ]]; then
        error_exit "${DOMAIN}: exiting due to config errors"
    fi
    debug "${DOMAIN}: check_config completed  - all OK"
}

clean_up() { # Perform pre-exit housekeeping
    ${ORIG_UMASK_CMD}
}

debug() { # write out debug info if the debug flag has been set
    if [[ ${_USE_DEBUG} -eq 1 ]]; then
        ${ECHO} ""
        ${ECHO} "$@"
    fi
}

error_exit() { # give error message on error exit
    ${ECHO} -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
    clean_up
    exit 1
}

get_os() { # function to get the current Operating System
    local uname_res=$(${UNAME} -s)
    if [[ $(${DATE} -h 2>&1 | ${GREP} -ic busybox) -gt 0 ]]; then
	os="busybox"
    elif [[ ${uname_res} == "Linux" ]]; then
	os="linux"
    elif [[ ${uname_res} == "FreeBSD" ]]; then
	os="bsd"
    elif [[ ${uname_res} == "Darwin" ]]; then
	os="mac"
    elif [[ ${uname_res:0:6} == "CYGWIN" ]]; then
	os="cygwin"
    elif [[ ${uname_res:0:5} == "MINGW" ]]; then
	os="mingw"
    else
	os="unknown"
    fi
    debug "detected os type = $os"
}

graceful_exit() { # normal exit function.
    clean_up
    exit
}

info() { # write out info as long as the quiet flag has not been set.
    if [[ ${_QUIET} -eq 0 ]]; then
        ${ECHO} "$@"
    fi
}

load_commands() { # load command sull path
    local file=$(dirname $0)/commands/${os}
    if [[ -f ${file} ]]; then
	. ${file}
    fi
}

rule_certs() {	## Create a make rule for public/certs files
    local desc=$1; shift
    local target=$1; shift
    local deps=
    for d in ${*/%/_LOCAL}; do deps+=" \${$d}"; done
    ${CAT}<<EOF
\${${target}_LOCATION}:	${deps}
	@${ECHO} Installing \$@
	@${ECHO} "## $desc" > \$@
	@${ECHO} "## $(${DATE})" >> \$@
	@${CAT} \$^ >> \$@
EOF
    [ -n "${INSTALL_CERT_MODE}" ] && ${CAT} <<EOF
	@${CHMOD} ${INSTALL_CERT_MODE} \$@
EOF
    [ -n "${INSTALL_CERT_OWNER}" ] && ${CAT} <<EOF
	@${CHOWN} ${INSTALL_CERT_OWNER} \$@
EOF
}

rule_private() {	## Create a make rule for private files
    local desc=$1; shift
    local target=$1; shift
    local deps=
    for d in ${*/%/_LOCAL}; do deps+=" \${$d}"; done
    ${CAT}<<EOF
\${${target}_LOCATION}:	${deps}
	@${ECHO} Installing \$@
	@${ECHO} "## $desc" > \$@
	@${ECHO} "## $(${DATE})" >> \$@
	@${CAT} \$^ >> \$@
EOF
    [ -n "${INSTALL_KEY_MODE}" ] && ${CAT} <<EOF
	@${CHMOD} ${INSTALL_KEY_MODE} \$@
EOF
    [ -n "${INSTALL_KEY_OWNER}" ] && ${CAT} <<EOF
	@${CHOWN} ${INSTALL_KEY_OWNER} \$@
EOF
}

signal_exit() { # Handle trapped signals
    case $1 in
        INT)
            error_exit "Program interrupted by user" ;;
        TERM)
            echo -e "\n$PROGNAME: Program terminated" >&2
            graceful_exit ;;
        *)
            error_exit "$PROGNAME: Terminating on unknown signal" ;;
    esac
}

help_message() { # print out the help message
    ${CAT} <<- _EOF_
	${PROGNAME} ver. ${VERSION}
	Install available SSL certificate obtained by getssl

	$(usage)

	Options:
	  -h, --help             Display this help message and exit
	  -a, --all              Check all certificates
	  -f, --force            Force full reinstall (overrides files)
	  -d, --debug            Outputs debug information
	  -w, --working_dir DIR  Working directory
	  -q, --quiet            Quiet mode (only outputs on error)

	_EOF_
}

usage() { # echos out the program usage
    ${ECHO} "Usage: $PROGNAME [-h|--help] [-a|--all] [-f|--force]" \
	    "[-w working_dir] [-q|--quiet] [-d|--debug] domain"
}

# -----------------------------------------------------------------------------
# Main logic

# Get the current OS, so the correct functions can be used for that
# OS. (sets the variable os)
get_os

# Load commands
load_commands

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# Parse command-line
while [[ -n ${1} ]]; do
    case $1 in
        -h | --help)
            help_message; graceful_exit ;;
        -d | --debug)
            ORIG_CMD+=" -d"
            INSTALL+=" -v"
            _USE_DEBUG=1 ;;
        -q | --quiet)
            ORIG_CMD+=" -q"
            _QUIET=1 ;;
        -f | --force)
            ORIG_CMD+=" -f"
	    MAKETARGET+=force
            _FORCE=1 ;;
        -a | --all)
            _CHECK_ALL=1 ;;
        -w | --working_dir)
            shift; WORKING_DIR="$1" ;;
        -* | --*)
            usage
            error_exit "Unknown option $1" ;;
        *)
            if [[ ! -z $DOMAIN ]]; then
                error_exit "invalid command line $DOMAIN - it appears to contain more than one domain"
            fi
            DOMAIN="$1"
	    DEFAULT_TEXT="$1"
            if [[ -z $DOMAIN ]]; then
                error_exit "invalid command line - it appears to contain a null variable"
            fi ;;
    esac
    shift
done

# if nothing in command line, print help and exit.
if [[ -z "${DOMAIN}" ]] && [[ ${_CHECK_ALL} -ne 1 ]]; then
    help_message
    graceful_exit
fi

# check if the "working directory" exist.
if [[ ! -d "${WORKING_DIR}" ]]; then
    error_exit "Working directory not found: ${WORKING_DIR}"
fi

# read any variables from config in working directory
if [[ -s "${WORKING_DIR}/getssl.cfg" ]]; then
    debug "reading config from ${WORKING_DIR}/getssl.cfg"
		# shellcheck source=/dev/null
    . "${WORKING_DIR}/getssl.cfg"
fi

# Define defaults for variables not set in the main config.
DOMAIN_STORAGE="${DOMAIN_STORAGE:=${WORKING_DIR}}"
DOMAIN_DIR="${DOMAIN_STORAGE}/${DOMAIN}"

# if "-a" option then check other parameters and create run for each domain.
if [[ ${_CHECK_ALL} -eq 1 ]]; then
    info "Install all certificates"

    if [[ ! -d "${DOMAIN_STORAGE}" ]]; then
        error_exit "DOMAIN_STORAGE not found  - ${DOMAIN_STORAGE}"
    fi

    for dir in ${DOMAIN_STORAGE}/*; do
        if [[ -d "${dir}" ]]; then
            debug "Checking ${dir}"
            # check if $dir looks like a domain name (contains a period)
            if [[ $(basename "${dir}") == *.* ]]; then
                cmd="${ORIG_CMD} -w ${WORKING_DIR} "$(basename "${dir}")
                debug "CMD: ${cmd}"
                eval "${cmd}"
            fi
        fi
    done

    graceful_exit
fi
# end of "-a" option (looping through all domains)

# check if the "domain directory" exist.
if [[ ! -d "${DOMAIN_DIR}" ]]; then
    error_exit "DOMAIN not found: ${DOMAIN_DIR##*/}"
fi

# read any variables from config in domain directory
if [[ -s "${DOMAIN_DIR}/getssl.cfg" ]]; then
  debug "reading config from ${DOMAIN_DIR}/getssl.cfg"
  # shellcheck source=/dev/null
  . "${DOMAIN_DIR}/getssl.cfg"
fi

# Define defaults for variables not set in the domain config.
CERT_FILE="${DOMAIN_DIR}/${DOMAIN}.crt"
KEY_FILE="${DOMAIN_DIR}/${DOMAIN}.key"
DH_FILE="${DOMAIN_DIR}/${DOMAIN}.dh${DOMAIN_DHPARAM_LEN}"
CA_CERT="${DOMAIN_DIR}/chain.crt"

# check config for typical errors.
check_config

# check if a certificate is present
if [[ ! -f "${CERT_FILE}" ]]; then
    error_exit "CERT_FILE not found: ${CERT_FILE}"
fi

# check if a private key is present
if [[ ! -f "${KEY_FILE}" ]]; then
    error_exit "KEY_FILE not found: ${KEY_FILE}"
fi

# check if private key and certificate match!

modulus_crt=$(${OPENSSL} x509 -noout -modulus -in ${CERT_FILE})
modulus_key=$(${OPENSSL} rsa -noout -modulus -in ${KEY_FILE})
if [[ -z "${modulus_crt}" ]] || [[ -z "${modulus_key}" ]]; then
    error_exit "Certificate or private key integrity issue"
fi

modulus_crt=$(${ECHO} ${modulus_crt} | ${OPENSSL} md5)
modulus_key=$(${ECHO} ${modulus_key} | ${OPENSSL} md5)
if [[ "${modulus_crt}" != "${modulus_key}" ]]; then
    error_exit "Certificate and private key don't match, aborting!"
fi

## Get defined LOCATIONS
for typ in ${LOCTYPES[@]}
do
    varname=$typ''_LOCATION
    [ -z "${!varname}" ] && continue
    LOCATIONS+=($varname)

    # Get file names - basename for text reports
    # Create $typ_FILE as basename of defined $typ_LOCATION
    eval ${varname/_LOCATION/_FILE}=${!varname##*/}
done

## Create rules, required files and defined locations:
rules+=$(rule_certs "${DESC[CA]}" CA_CERT ${CERTS[CA]//,/ })
# Command substitution $(foo ..) removes trailing newlines
rules+=$(${PRINTF} "\n\nx"); rules=${rules%x} # Add and remove but newline

for typ in ${!CERTS[@]}; do
    rules+=$(rule_certs "${DESC[$typ]}" DOMAIN_$typ ${CERTS[$typ]//,/ })
    # Command substitution $(foo ..) removes trailing newlines
    rules+=$(${PRINTF} "\n\nx"); rules=${rules%x} # Add and remove but newline
done
for typ in ${!PRIVATE[@]}; do
    rules+=$(rule_private "${DESC[$typ]}" DOMAIN_$typ ${PRIVATE[$typ]//,/ })
    # Command substitution $(foo ..) removes trailing newlines
    rules+=$(${PRINTF} "\n\nx"); rules=${rules%x} # Add and remove but newline
done
for loc in ${LOCATIONS[@]}; do
    files+=$(${ECHO} FILES+=\${$loc})
    # Command substitution $(foo ..) removes trailing newlines
    files+=$(${PRINTF} "\nx"); files=${files%x} # Add and remove but newline
done
for loc in ${LOCATIONS[@]}
do
    locs+=$(${ECHO} $loc=${!loc})
    # Command substitution $(foo ..) removes trailing newlines
    locs+=$(${PRINTF} "\nx"); locs=${locs%x} # Add and remove but newline
done

## Install or update files
${CAT} <<EOF > ${DOMAIN_DIR}/install.mk
## Makefile - getssl certificates installation
CERTS_MODE=${INSTALL_CERT_MODE}
PRIVATE_MODE=${INSTALL_KEY_MODE}
CERTS_OWNER=${INSTALL_CERT_OWNER}
PRIVATE_OWNER=${INSTALL_KEY_OWNER}
FORMAT="${FORMAT_TEXT}"

# Local domain files - generated by getssl
CA_CERT_LOCAL=${CA_CERT}
DOMAIN_CERT_LOCAL=${CERT_FILE}
DOMAIN_KEY_LOCAL=${KEY_FILE}
DOMAIN_DH_LOCAL=${DH_FILE}

# Location of files to be installed - extracted from domain getssl.cfg
${locs}
${files}
.PHONY: install-${DOMAIN} clean force
install-${DOMAIN}:	install
install:	\${FILES}
force:		clean install
clean:
	@${ECHO} Cleaning ${DOMAIN}...
	@${RM} -f \\
		\${CA_CERT_LOCATION} \\
		\${DOMAIN_CERT_LOCATION} \\
		\${DOMAIN_CHAIN_LOCATION} \\
		\${DOMAIN_KEY_LOCATION} \\
		\${DOMAIN_PEM_LOCATION} \\
		\${DOMAIN_DH_LOCATION} \\
		\${DOMAIN_DHPEM_LOCATION} \\
		\${DOMAIN_CRTKEY_LOCATION} \\
		\${DOMAIN_DHKEY_LOCATION} \\
		\${DOMAIN_DHCRT_LOCATION} \\
		\${DOMAIN_TXTCERT_LOCATION} \\
		\${DOMAIN_TXTKEY_LOCATION}
# Rules
${rules}
ifdef CA_CERT_LOCATION
DOMAIN_TXTCERT_FILES+=\${CA_CERT_LOCATION}
DOMAIN_TXTKEY_FILES+=\${CA_CERT_LOCATION}
endif # CA_CERT_LOCATION
ifdef DOMAIN_CERT_LOCATION
DOMAIN_TXTCERT_FILES+=\${DOMAIN_CERT_LOCATION}
DOMAIN_TXTKEY_FILES+=\${DOMAIN_CERT_LOCATION}
endif # DOMAIN_CERT_LOCATION
ifdef DOMAIN_KEY_LOCATION
DOMAIN_TXTKEY_FILES+=\${DOMAIN_KEY_LOCATION}
endif # DOMAIN_KEY_LOCATION
ifdef DOMAIN_DH_LOCATION
DOMAIN_TXTKEY_FILES+=\${DOMAIN_DH_LOCATION}
endif # DOMAIN_DH_LOCATION

\${DOMAIN_TXTCERT_LOCATION}:		\${DOMAIN_TXTCERT_FILES}
	@${ECHO} Creating \$@
	@${ECHO} -n "Creation: " > \$@
	@${DATE} >> \$@
	@${ECHO} >> \$@
ifdef DOMAIN_CERT_LOCATION
	@${ECHO} Summary: ${DOMAIN} >> \$@
	@${OPENSSL} x509 -noout -dates -subject -issuer -serial -in \${DOMAIN_CERT_LOCATION} >> \$@
	@${ECHO} >> \$@
endif # DOMAIN_CERT_LOCATION
	@${ECHO} "Files:" >> \$@
	@${PRINTF} \${FORMAT} ${CA_CERT_FILE:=${CAROOT}.crt} "${DESC[CA]}" >> \$@
	@${PRINTF} \${FORMAT} ${DOMAIN_CERT_FILE:=${DEFAULT_TEXT}.crt} "${DESC[CERT]}" >> \$@
	@${PRINTF} \${FORMAT} ${DOMAIN_CHAIN_FILE:=${DEFAULT_TEXT}.pem} "${DESC[CHAIN]}" >> \$@
	@${ECHO} >> \$@
	@${ECHO} "Details:" >> \$@
ifdef DOMAIN_CERT_LOCATION
	@${ECHO} -n [${DOMAIN}]' ' >> \$@
	@${OPENSSL} x509 -noout -text -in \${DOMAIN_CERT_LOCATION} >> \$@
	@${ECHO} >> \$@
endif # DOMAIN_CERT_LOCATION
ifdef CA_CERT_LOCATION
	@${ECHO} -n [${CA_CERT_FILE:=${CAROOT}}]' ' >> \$@
	@${OPENSSL} x509 -noout -text -in \${CA_CERT_LOCATION} >> \$@
	@${ECHO} >> \$@
endif # CA_CERT_LOCATION
ifneq (\${CERTS_MODE},)
	@${CHMOD} \${CERTS_MODE} \$@
endif
ifneq (\${CERTS_OWNER},)
	@${CHOWN} \${CERTS_OWNER} \$@
endif

\${DOMAIN_TXTKEY_LOCATION}:		\${DOMAIN_TXTKEY_FILES}
	@${ECHO} Creating \$@
	@${ECHO} -n "Creation: " > \$@
	@${DATE} >> \$@
	@${ECHO} >> \$@
ifdef DOMAIN_CERT_LOCATION
	@${ECHO} Summary: ${DOMAIN} >> \$@
	@${OPENSSL} x509 -noout -dates -subject -issuer -serial -in \${DOMAIN_CERT_LOCATION} >> \$@
	@${ECHO} >> \$@
endif # DOMAIN_CERT_LOCATION
	@${ECHO} "Files:" >> \$@
	@${PRINTF} \${FORMAT} ${DOMAIN_KEY_FILE:=${DEFAULT_TEXT}.key} "${DESC[KEY]}" >> \$@
	@${PRINTF} \${FORMAT} ${DOMAIN_PEM_FILE:=${DEFAULT_TEXT}.pem} "${DESC[PEM]}" >> \$@
	@${PRINTF} \${FORMAT} ${DOMAIN_DH_FILE:=${DEFAULT_TEXT}.dh} "${DESC[DH]}" >> \$@
	@${PRINTF} \${FORMAT} ${DOMAIN_DHPEM_FILE:=${DEFAULT_TEXT}_dh.pem} "${DESC[DHPEM]}" >> \$@
	@${PRINTF} \${FORMAT} ${DOMAIN_DHKEY_FILE:=${DEFAULT_TEXT}_dh.key} "${DESC[DHPEM]}" >> \$@
	@${PRINTF} \${FORMAT} ${DOMAIN_DHCRT_FILE:=${DEFAULT_TEXT}_dh.crt} "${DESC[DHPEM]}" >> \$@
	@${PRINTF} \${FORMAT} ${DOMAIN_CRTKEY_FILE:=${DEFAULT_TEXT}_crt.key} "${DESC[CRTKEY]}" >> \$@
	@${ECHO} >> \$@
	@${ECHO} "Details:" >> \$@
ifdef DOMAIN_KEY_LOCATION
	@${ECHO} -n [${DOMAIN}]' ' >> \$@
	@${OPENSSL} rsa -noout -text -in \${DOMAIN_KEY_LOCATION} >> \$@
	@${ECHO} >> \$@
endif # DOMAIN_CERT_LOCATION
ifdef DOMAIN_CERT_LOCATION
	@${ECHO} -n [${DOMAIN}]' ' >> \$@
	@${OPENSSL} x509 -noout -text -in \${DOMAIN_CERT_LOCATION} >> \$@
	@${ECHO} >> \$@
endif # DOMAIN_CERT_LOCATION
ifdef CA_CERT_LOCATION
	@${ECHO} -n [${CA_CERT_FILE:=${CAROOT}}]' ' >> \$@
	@${OPENSSL} x509 -noout -text -in \${CA_CERT_LOCATION} >> \$@
	@${ECHO} >> \$@
endif # CA_CERT_LOCATION
ifdef DOMAIN_DH_LOCATION
	@${ECHO} -n [${DOMAIN}] >> \$@
	@${OPENSSL} dhparam -noout -text -in \${DOMAIN_DH_LOCATION} >> \$@
	@${ECHO} >> \$@
endif # DOMAIN_DH_LOCATION
ifneq (\${PRIVATE_MODE},)
	@${CHMOD} \${PRIVATE_MODE} \$@
endif # PRIVATE_MODE
ifneq (\${PRIVATE_OWNER},)
	@${CHOWN} \${PRIVATE_OWNER} \$@
endif # PRIVATE_OWNER

EOF

_UPTODATE=0
${MAKE} -f ${DOMAIN_DIR}/install.mk ${MAKETARGET} | \
    ${GREP} -v Nothing || _UPTODATE=1

if [ ${_UPTODATE} -gt 0 ]
then
    info "[${DOMAIN}] certificate is up-to-date."
else
    # Run reload command to restart apache / nginx or whatever system
    if [ -n "${RELOAD_CMD}" ] && [ "${_FORCE}" -eq 0 ]
    then
	info "[${DOMAIN}] reloading SSL services"
	debug "running reload command $RELOAD_CMD"
	if ! eval "$RELOAD_CMD" ; then
            error_exit "error running $RELOAD_CMD"
	fi
    fi
fi

# gracefully exit ( tidying up temporary files etc).
graceful_exit

# End of file: getssl-install-certs
