#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# getssl-runas - subset utility of GetSSL - Made to run 'getssl'
# without root access. The script open the acme challenge folder for
# 'other' write-access, run the 'getssl' as regular user then revert
# the write-access.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

# For usage, run "getssl-runas -h"

# Revision history:
# 2018-01-14 Created (v0.1)
# 2018-01-15 Redesign for basic function, remove installation and
#            service reload, redesign the processing of the options
#            (v0.2)
#
# -----------------------------------------------------------------------------
#
declare -A ACFOLDERS

PROGNAME=${0##*/}
VERSION="0.02"

# defaults
GETSSL_CMD=(${0%/*}/getssl)
USERNAME=
WORKING_DIR=
_USE_DEBUG=0

CAT=/bin/cat
CHMOD=/bin/chmod
ECHO=/bin/echo
STAT=/usr/bin/stat
SU=/bin/su

# Define all functions (in alphabetical order)

debug() { # write out debug info if the debug flag has been set
  if [[ ${_USE_DEBUG} -eq 1 ]]; then
    ${ECHO} "$@"
  fi
}

acme_challenge_folder_close() { # remove other acces to acme challenge folders
    local dir
    for dir in ${!ACFOLDERS[@]}; do
	if [ ${ACFOLDERS[${dir}]:8:1} != 'w' ]; then
	    local perms=$(${STAT} -c %A ${dir})
	    if [ ${perms:8:1} == 'w' ]; then 
		${CHMOD} o-w ${dir}
		debug Removing access to ${dir} #[${perms} =\> $(stat -c %A ${dir})]
	    fi
	fi
    done
}

acme_challenge_folder_dump() { # dump list of acme challenge folders
    local dir
    for dir in ${!ACFOLDERS[@]}; do
	debug [${ACFOLDERS[${dir}]}] ${dir}
    done
}

acme_challenge_folder_load() { # load list of acme challenge folders
    local domain=$1
    
    if [ -n "${domain}" ]; then
	test -f ${WORKING_DIR}/${domain}/getssl.cfg && DOMAINS[0]=${domain}
    else
	for dir in ${WORKING_DIR}/*; do
	    test -d ${dir} || continue
	    test -f ${dir}/getssl.cfg || continue
	    DOMAINS+=(${dir##*/})
	done
    fi
    if [ "${#DOMAINS[@]}" -lt 1 ]; then
	${ECHO} "No domains defined"
	exit
    fi

    for dom in ${DOMAINS[@]}; do
	test -f ${WORKING_DIR}/${dom}/getssl.cfg || continue
	. ${WORKING_DIR}/${dom}/getssl.cfg
	for acl in ${ACL[@]}; do
	    test ${acl:0:1} == '/' || continue
	    ACFOLDERS[${acl}]=$(stat -c %A ${acl})
	done
    done
}

acme_challenge_folder_open() { # grant other acces to acme challenge folders
    local dir
    for dir in ${!ACFOLDERS[@]}; do
	if [ ${ACFOLDERS[${dir}]:8:1} != 'w' ]; then
	    ${CHMOD} o+w ${dir}
	    debug Adding access to ${dir} #[${ACFOLDERS[${dir}]} =\> $(stat -c %A ${dir})]
	fi
    done
}

error_exit() { # give error message on error exit
  ${ECHO} -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  exit 1
}

error_usage_exit() { # give error message and usage on error exit
  ${ECHO} -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  usage
  exit
}

usage() { # echos out the program usage
    ${CAT} <<EOF
Usage: ${PROGNAME} USERNAME [-w WORKING_DIR] [-q|--quiet]
       [-h|--help] [-d|--debug] [DOMAIN [DOMAIN ...]] [-- [getssl-options ...]]
EOF
}

## Main logic
test -z "$1" && usage && exit

# Get options
while [ -n "$1" ]; do
    case "$1" in
        -h|--help)
            usage; exit ;;
        -w|--working_dir)
            shift; WORKING_DIR="$1"
            GETSSL_CMD+=(-w ${WORKING_DIR}) ;;
        -d|--debug)
            GETSSL_CMD+=(-d)
            _USE_DEBUG=1 ;;
        --)	# Handle 'getssl' options
            shift; while [ -n "$1" ]; do
                case "$1" in
                    -a|--all)
                        ${ECHO} "Superfluous 'getssl' option (ignored): $1"
                        shift; continue ;;
                    -c|--create)
                        error_exit "Unsupported 'getssl' option: $1" ;;
                    -f|--force)
                        if [ ${#ARGS[@]} -eq 1 ]; then
                            error_exit "Incompatible 'getssl' option: $1 (at least one domain is required)"
                        fi ;;
                esac
                GETSSL_CMD+=($1); shift;
            done ;;
        -*)
            error_usage_exit "Unknown option: $1" ;;
        *)
            ARGS+=($1) ;;
    esac
    shift
done

## Check and get USERNAME
test -z "${ARGS[0]}" && error_usage_exit "Username is missing"
USERNAME=${ARGS[0]}; unset ARGS[0]; ARGS=("${ARGS[@]}")

## Check working directory
test -z "${WORKING_DIR}" && \
    error_usage_exit "Working directory is not defined, missing option '-w'"
test -d "${WORKING_DIR}" || \
    error_exit "Working dir folder not found: ${WORKING_DIR}"

## Add getssl --all option, if no DOMAIN is specified
test -z "${ARGS[0]}" && GETSSL_CMD+=(-a)

## Do-while loop - load ACME challenge folders
i=0; while :; do
    acme_challenge_folder_load ${ARGS[$i]}
    let i+=1; test -z "${ARGS[$i]}" && break
done

acme_challenge_folder_dump
acme_challenge_folder_open

## Do-while loop - execute getssl for each domain (or once for --all)
i=0; while :; do
    cmd="${GETSSL_CMD[@]} ${ARGS[$i]}"
    debug Executing su ${USERNAME} -c "${cmd}"
    ${SU} ${USERNAME} -c "${cmd}"
    let i+=1; test -z "${ARGS[$i]}" && break
done

acme_challenge_folder_close
